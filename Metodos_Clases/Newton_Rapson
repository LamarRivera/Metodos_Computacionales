import matplotlib.pyplot as plt
import numpy as np

if __name__ == "__main__":

    #Definición de la función
    def function(x):
        return x**2-2

    #Definición de su derivada
    def derivative(x):
        return 2*x

def newton_rapson_metod(function, derivative, x0, tol, max_iter=100):

    x1 = 0 #Inicialización

    if abs(x0-x1)<= tol and abs((x0-x1)/x0)<= tol: #Tolerancia inicial
        return x0

    print("k\t x0\t\t function(x0)")
    k = 1

    while k <= max_iter:
        x1 = x0 - (function(x0)/derivative(x0)) #Función de Newton Rapson
        print("x%d\t%e\t%e"%(k,x1,function(x1))) #Impresión del resultado

        if abs(x0-x1)<= tol and abs((x0-x1)/x0)<= tol: #Comprobar si converge
            plt.plot(x0, function(x0), 'or')
            return x1

        x0 = x1
        k = k + 1
        plt.plot(x0, function(x0), 'or')

        #Detener el ciclo por si se pasa del max_iter
        if k > max_iter:
            print("ERROR: Exceeded max number of iterations")

    return x1  # Returns the value



#Llamado de la funcion
sqrt = newton_rapson_metod(function, derivative, 1.7, 0.0000001)
print("The approximate value of x is: "+str(sqrt))

# Plotting configuration
u = np.arange(1.0, 2.0, 0.0001) # Setting up values for x in the plot
w = u**2 - 2 # Define the main function again

plt.plot(u, w)
plt.axhline(y=0.0, color='black', linestyle='-')
plt.title('Newton-Raphson Graphics for' + ' y = x^2 - 2')
plt.xlabel('X')
plt.ylabel('Y')
plt.grid(True)
plt.legend(['Xn'], loc='upper left')
plt.show()
